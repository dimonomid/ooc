#!/bin/ruby

# Usage examples:
#
# Generate base class Shape and subclass Circle:
# $ ruby ooc_gen.rb new class shape circle
#
# Generate base class Shape and two subclasses: Circle and MyShape:
# $ ruby ooc_gen.rb new class shape circle myshape:MyShape
#
# So that, each class name may be specified as just single lowecased
# (underscore-separated) word, or as two words separated by colon.
#
# If camelized version isn't provided manually, it is autogenerated,
# which isn't always what we want.
#

require 'pathname'
require 'fileutils'



INHER_PATH = 'src/tpl/inheritance'

class CName
  @name_under = ''
  @name_camel = ''

  def initialize(name)
    l = name.split(':')
    if (l.size == 1)
      @name_under = name
      @name_camel = camelize(name)
    else
      @name_under = l[0]
      @name_camel = l[1]
    end
  end

  def name_under
    @name_under
  end

  def name_camel
    @name_camel
  end
end

def camelize(str)
  str.split('_').map {|w| w.capitalize}.join
end

def mysubst(str, search_str, replace_str)
  str.gsub!(search_str.name_under, replace_str.name_under)
  str.gsub!(search_str.name_under.upcase, replace_str.name_under.upcase)
  str.gsub!(search_str.name_camel, replace_str.name_camel)
end

def newclass(out_file, superclass_tpl, subclass_tpl, superclass, subclass)
  dir = File.dirname(Pathname.new(File.expand_path(__FILE__)).realpath)

  [".c", ".h"].each do |ext|

    classname = subclass.nil? ? superclass_tpl.name_under : subclass_tpl.name_under

    file_in = File.open(
      dir + "/" + INHER_PATH + "/" + classname + ext, "r"
    )

    contents = file_in.read
    file_in.close

    if !subclass.nil? && !subclass_tpl.nil?
      mysubst(contents, subclass_tpl, subclass)
    end
    mysubst(contents, superclass_tpl, superclass)

    File.open(out_file + ext, "w") do |file|
      file << contents
    end

  end
end



if ARGV.shift == 'new'

  case ARGV.shift
  when 'class'

    # get name of class to generate
    superclass = CName.new(ARGV.shift)
    subclasses = []

    # get all subclass names (if any)
    while !ARGV.empty?
      subclasses.push CName.new(ARGV.shift)
      #subclasses.push ARGV.shift
    end

    if !superclass.nil?
      cur_dir = Dir.pwd
      FileUtils.mkdir_p(superclass.name_under)
      out_dir = cur_dir + "/" + superclass.name_under;

      newclass(out_dir + "/" + superclass.name_under,
               CName.new('mybase:MyBase'),
               nil,
               superclass,
               nil
              )

      subclasses.each do |subclass|
        newclass(out_dir + "/" + subclass.name_under,
                 CName.new('mybase:MyBase'),
                 CName.new('myderived:MyDerived'),
                 superclass,
                 subclass
                )
      end

    else
      puts "Please specify at least base class name"
    end

  else
    puts "Wrong generator"
  end

else
  puts "Usage: ruby #{__FILE__} new ..."
end

